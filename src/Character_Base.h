#pragma once
//#include "Vector2.h"
//#include "Base.h"
// キャラクタークラス
// Baseクラスを継承
class CharacterBase : public Base
{
public:

	// 全キャラ共通の値
#define HP_MAX 700          // HPの最大値
#define SKILL_POINT_MAX 300 // スキルポイントの最大値
#define SP_POINT_MAX 400    // SPポイントの最大値
#define STATUS_BAR_SIZE 80  // ステータスバーの太さのサイズ

//#define PUNCH_MAX 2
	//---------------
	// 関数の定義
	//---------------
	//virtual と = 0 しておくことで派生クラスでオーバーロードできる
	CharacterBase();

	// 初期処理
	// 引数
	// プレイヤーの一人目か二人目かの番号
	virtual void Init(int player_num) = 0; 
	virtual void Animation_Init() = 0;     // アニメーション用の初期処理
	// カメラに対して前後左右に移動するため
	// カメラがどの方向にあるのかを情報として使う
	// 更新処理
	// 引数
	// １：カメラの向き
	// ２：SEのボリューム
	virtual void Update(Vector3* camera_rot, int SE_Volume/*, bool status_flag*/) = 0;		
	virtual void Draw() = 0;		               // 描画処理
	virtual void Exit() = 0;		               // 終了処理
	virtual void Move_Hit_Update() = 0;            // 壁擦り用の関数
	virtual void Attack_PressButton_Update(Vector3* camera_rot) = 0;  // アクションに関するボタン押し用の関数（見やすくするための関数）
	virtual void Attack_Update() = 0;              // 攻撃が行われた時に行う
	virtual void Damage_Update(int* m_attack_damage) = 0;              // ダメージを食らった時に行う
	virtual void Block_Update() = 0;               // ガードが行われた時に行う
	virtual void SE_Init() = 0;                    // SEの初期化よう関数

	void Update_Status();        // ステータス更新処理
	void Reset_Status();         // ステータスのリセット用関数

	// ステータス描画用関数
	// 引数
	// プレイヤーの一人目か二人目かの番号
	void Draw_Status(int player_num);    


	// プレイヤーの移動をする関数
	// // 引数
	// １：今動いていいのか
	// ２：いまは移動していいていいかの判断
	// ３：プレイヤーの向いている向き
	// ４：移動スピード
	void Move_Player(bool* m_check_move, Vector3* camera_rot, Vector3* player_rot, const float* mov_speed);

	// 前移動
	// 引数
	// １：今動いていいのか
	// ２：いまは移動していいていいかの判断
	// ３：プレイヤーの向いている向き
	// ４：移動スピード
	void Move_Front(bool* m_check_move, Vector3* camera_rot, Vector3* player_rot, const float* mov_speed);
	

	// 後ろ移動
	// 引数
	// １：今動いていいのか
	// ２：いまは移動していいていいかの判断
	// ３：プレイヤーの向いている向き
	// ４：移動スピード
	void Move_Dhindo(bool* m_check_move, Vector3* camera_rot, Vector3* player_rot, const float* mov_speed);

	// 左移動
	// 引数
	// １：今動いていいのか
	// ２：いまは移動していいていいかの判断
	// ３：プレイヤーの向いている向き
	// ４：移動スピード
	void Move_Left(bool* m_check_move, Vector3* camera_rot, Vector3* player_rot, const float* mov_speed);
	
	// 右移動
	// 引数
	// １：今動いていいのか
	// ２：いまは移動していいていいかの判断
	// ３：プレイヤーの向いている向き
	// ４：移動スピード
	void Move_Right(bool* m_check_move, Vector3* camera_rot, Vector3* player_rot, const float* mov_speed);

	// キャラクターの移動用関数(ゲームパッド用)
	// 引数
	// １：今動いていいのか
	// ２：いまは移動していいていいかの判断
	// ３：プレイヤーの向いている向き
	// ４：移動スピード
	void Move_GamePad(bool* m_check_move, Vector3* mov, Vector3* camera_rot, const float* mov_speed);

	// キャラクターの壁擦り用関数
	// 引数
	// １：自分（キャラ）の座標
	// ２：自分（キャラ）のあたり判定のサイズ（中心から見たサイズ）
	// ３：壁の座標
	// ４：壁のあたり判定のサイズ（中心から見たサイズ）
	void Move_Hit(Vector3* before_pos, Vector3* hit_size, Vector3* other_pos, Vector3* other_size);


	// 普通アニメーション変数のNew用関数
	// 引数
	// １：アニメーションの数
	void Nomal_Anim_New(int ANIM_MAX);
	// 普通アニメーションの初期設定
	// 引数
	// １：最初にしていてほしいいアニメーションの番号
	// ２：アニメーションの最大数
	// ３：アタッチするときの番号 １とか0とかの数字
	void Nomal_Anim_Init(int ANIM_IDLE, int ANIM_MAX, int index);

	// 攻撃アニメーション変数のNew用関数
	// 引数
	// 攻撃アニメーションの数
	void Attack_Anim_New(int ATTACK_ANIM_MAX);

	// 攻撃アニメーションの初期設定
	// 引数
	// １：攻撃アニメーションの数
	// ２：アタッチするときの番号 １とか0とかの数字
	void Attack_Anim_Init(int ATTACK_ANIM_MAX, int index);

	// アクションにあったアニメーションつける関数（攻撃）
	// 引数
	// アタッチするときの番号 １とか0とかの数字
	void Attack_Action(int index);

	// ダメージアニメーション用の変数のNew用関数
	// 引数
	// ダメージアニメーションの数
	void Damage_Anim_New(int DAMAGE_ANIM_MAX);

	// ダメージアニメーションの初期設定
	// 引数
	// １：ダメージアニメーションの数
	// ２：アタッチするときの番号 １とか0とかの数字
	void Damage_Anim_Init(int DAMAGE_ANIM_MAX, int index);

	// アクションにあったアニメーションつける関数（ダメージ）
	// 引数
	// アタッチするときの番号 １とか0とかの数字
	void Damage_Action(int index);

	// ガードアニメーション用の変数のNew用関数
	// 引数
	// ガードアニメーションの数
	void Block_Anim_New(int BLOCK_ANIM_MAX);

	// ガードアニメーションの初期設定
	// 引数
	// １：ガードアニメーションの数
	// ２：アタッチするときの番号 １とか0とかの数字
	void Block_Anim_Init(int BLOCK_ANIM_MAX, int index);

	// アクションにあったアニメーションつける関数（ガード）
	// 引数
	// アタッチするときの番号 １とか0とかの数字
	void Block_Action(int index);

	// アニメーション変数をdeleteする用の関数
	void Anim_Delete();




	// 当たり判定のあったとき当たった相手の情報をとってくる関数
    // カプセル、円
	// 引数
	// １：Ｘ座標
	// ２：Ｙ座標
	// ３：半径
	void Get_other(float* hit_other_x, float* hit_other_z, float* hit_other_r);

	// 当たり判定のあったとき当たった相手の情報をとってくる関数
	// 立方体
	// 引数
	// １：座標（Vector3型）
	// ２：サイズ（Vector3型）
	void Get_other(Vector3* hit_other_1, Vector3* hit_other_2);                

	// 当たり判定を作る関数(カプセル型、円型)
	// 引数
	// １：円、カプセルの上の部分
	// ２：円、カプセルの下の部分
	void Attack_Hit_New(Vector3* pot_pos, Vector3* under_pos);

	// 攻撃力を保存する用の関数
	// 引数
	// １：攻撃アニメーションの数
	// ２：各攻撃のダメージ用変数
	void Set_Attack_Damage(int ATTACK_ANIM_MAX, const int* attack_damage);

	// delete用の関数
	void Delete();
	//---------------
	// 定数の定義
	//---------------
public:

	//---------------
	// 変数の定義
	//---------------
public:
	// ゲームパッド用の変数
	int m_pad_input = 0;

	PAD_NO m_pad_no = PAD_NO::PAD_NO1;				// 何番のパッドを使っているのか
	// ゲームパッドの番号をセットする
	// DXライブラリー側でのパッドの番号も取得
	void SetPadNo(PAD_NO no, int dx_no)
	{
		m_pad_no = no;
		m_pad_input = dx_no;
	}
	// ゲームパッドの番号をとってくる
	PAD_NO GetPadNo() const
	{
		return m_pad_no;
	}


protected:

	//---------------------------------------------------------------------------
	// モデルアニメーション用変数
	//---------------------------------------------------------------------------
	int	m_model = 0;	  // 各キャラのモデルを入れる用の変数
	int m_anim_num = 0;     // 各継承先のクラスでのアニメーションを切り替える用の変数
	int m_action_mode = 0;  // 今攻撃モードなのか普通モードなのかを判別するを判断する用の変数

	//---------------------------------------------------------------------------
	// 普通アニメーション読み込み用の配列
	//---------------------------------------------------------------------------
	int* m_anim_model = 0;    // アニメーションモデル
	int* m_anim_attach = 0;   // モデルにアニメーションをアタッチする用の配列（アタッチ番号を取得する）
	float* m_anim_total = 0;  // アニメーションが何フレーム科を取得、それを保存する用の配列
	float* m_anim_rate = 0;	// それぞれのアニメーションのブレンド率（0.0f ~ 1.0f）
	float* m_anim_frame = 0;  // アニメーションが何フレーム進んでいるのか


	//---------------------------------------------------------------------------
	// 攻撃アニメーション用変数
	//---------------------------------------------------------------------------
	int* m_attack_anim_model = 0;    // 各攻撃アニメーションアニメーション読み込み用の配列
	int* m_attack_anim_attach = 0;   // モデルに攻撃アニメーションをアタッチする用の配列（アタッチ番号を取得する）
	float* m_attack_anim_total = 0;  // 攻撃アニメーションが何フレーム科を取得、それを保存する用の配列
	float* m_attack_anim_rate = 0;   // それぞれの攻撃アニメーションのブレンド率（0.0f ~ 1.0f）
	float* m_attack_anim_frame = 0;  // 攻撃アニメーションが何フレーム進んでいるのか


	//---------------------------------------------------------------------------
	// ガードアニメーション用変数
	//---------------------------------------------------------------------------
	int* m_block_anim_model = 0;         // アニメーションモデル
	int* m_block_anim_attach = 0;        // モデルにアニメーションをアタッチする用の配列（アタッチ番号を取得する）
	float* m_block_anim_total = 0;       // アニメーションが何フレーム科を取得、それを保存する用の配列
	float* m_block_anim_rate = 0;	       // それぞれのアニメーションのブレンド率（0.0f ~ 1.0f）
	float* m_block_anim_frame = 0;       // アニメーションが何フレーム進んでいるのか


	//---------------------------------------------------------------------------
	// ダメージ（受けた時の）アニメーション用変数
	//---------------------------------------------------------------------------
	int* m_damage_anim_model = 0;    // アニメーションモデル
	int* m_damage_anim_attach = 0;   // モデルにアニメーションをアタッチする用の配列（アタッチ番号を取得する）
	float* m_damage_anim_total = 0;  // アニメーションが何フレーム科を取得、それを保存する用の配列
	float* m_damage_anim_rate = 0;   // それぞれのアニメーションがどのくらうのわりあいになるか（0.0f ~ 1.0f）
	float* m_damage_anim_frame = 0;  // アニメーションが何フレーム進んでいるのか

	//---------------------------------------------------------------------------
	// エフェクト用の変数
	//---------------------------------------------------------------------------
	int* m_effect_container = 0; // エフェクトを入れる用の変数
	int* m_effect_handle = 0;        // エフェクトを使う時用のハンドル
public:
	int m_attack_anim_pick = 0;     // どのアニメーションをしているのかを判断する用
	int m_block_anim_pick = 0;      // どのアニメーションをしているのかを判断する用
	int m_damage_anim_pick = 0;     // どのアニメーションをしているかを判断する用の変数

public:
	//---------------------------------------------------------------------------
	// 各キャラの当たり判定用変数
	//---------------------------------------------------------------------------
	bool m_cd_hit_flag = false; //< あたり判定を行てよいかのフラグ


	//---------------------------------------------------------------------------
	// 各アクション判断用変数
	//---------------------------------------------------------------------------
	bool m_action_flag = false;       // アクション（何かのアニメーション）されているかのフラグ
	bool m_attack_flag = false;       // 今攻撃中なのかの判断 
	bool m_damage_flag = false;       // 今ダメージを受けているのか
	bool m_block_flag = false;        // 今ガード中なのか
	bool m_bead_hit_flag = false;     // 弾が何かにあたったか
	bool m_skill_flag = false;        // スキル技の使用できるかのフラグ
	bool m_sp_flag = false;           // 必殺技の使用できるかのフラグ

	//---------------------------------------------------------------------------
	// コンボ関連
	//---------------------------------------------------------------------------
	bool m_combo_flag = false;        // 近距離攻撃でのコンボフラグ
	int m_next_combo =0;         // 次に出してほしい攻撃

	//---------------------------------------------------------------------------
	// 当たり判定があったときの各処理の判断用変数
	//---------------------------------------------------------------------------
	bool m_move_judge = false;         // いまは移動していいていいかの判断
	Vector3 m_hit_other_pos = { 0.0f,0.0f,0.0f };   // 当たり判定があった相手の座標を入れる
	Vector3 m_hit_other_size = { 0.0f,0.0f,0.0f };  // 当たり判定があった相手のサイズを入れる（立方体の場合）

	//---------------------------------------------------------------------------
	// キャラクターのカプセル型の当たり判定用変数
	//---------------------------------------------------------------------------
	Vector3 m_hit_body_pos_top = { 0.0f,0.0f,0.0f };     // カプセルの上側 
	Vector3 m_hit_body_pos_under = { 0.0f,0.0f,0.0f };   // 下側
	float   m_hit_body_r = 0.0f;       // 半径

	//---------------------------------------------------------------------------
	// 移動用当たり判定（ボックス）
	//---------------------------------------------------------------------------
	Vector3 m_move_hit_box_pos = { 0.0f,0.0f,0.0f };  // キャラの足の下にパネルのようにして使う
	Vector3 m_move_hit_box_size = { 0.0f,0.0f,0.0f }; // パネルサイズ
	Vector3 m_character_size = { 0.0f,0.0f,0.0f };    // プレイヤーをボックスとしたときの大きさ(中心座標からPANEL_HAL)

	//---------------------------------------------------------------------------
	// アクション時の当たり判定用変数（カプセル）
	//---------------------------------------------------------------------------
	Vector3 m_hit_cd_pos_top = { 0.0f,0.0f,0.0f };     // カプセルの上側 
	Vector3 m_hit_cd_pos_under = { 0.0f,0.0f,0.0f };   // 下側
	float   m_hit_cd_r = 0.0f;       // 半径

	//---------------------------------------------------------------------------
	// ガード時の当たり判定用変数（カプセル）
	//---------------------------------------------------------------------------
	Vector3 m_block_top = { 0.0f,0.0f,0.0f };   // カプセルの上側
	Vector3 m_block_under = { 0.0f,0.0f,0.0f }; // 下側
	float   m_block_r = 0.0f; // 半径

	//---------------------------------------------------------------------------
	// 投げものの当たり描画用変数（円）
	//---------------------------------------------------------------------------
	Vector3 m_bead_pos = { 0.0f,0.0f,0.0f };  // 座標
	float   m_bead_r = 0.0f;    // 半径

protected:
	//---------------------------------------------------------------------------
	// 移動に関する物
	//---------------------------------------------------------------------------
	bool m_check_move = false;    // 移動中かどうかを判断する変数
	Vector3 m_mov = { 0.0f,0.0f,0.0f };          //  ゲームパッド用移動用ベクトル用変数
public:
	Vector3 m_before_mov = { 0.0f,0.0f,0.0f };   // 毎フレーム移動前の座標をいれる用の変数

	//---------------------------------------------------------------------------
	// キャラクターのステータス用の変数
	//---------------------------------------------------------------------------
	// キャラクターの体力
	Vector2 m_hp_pos = { 0,0 };          // 描画座標
	Vector2 m_hp_count = { 0,0 };        // 計算用
	float m_now_hp = 0;                  // 今のhp
	Vector2 m_skill_pos = { 0,0 };       // 描画座標
	Vector2 m_skill_count = { 0,0 };     // 計算用
	float m_now_skill = 0;               // 今のスキルポイント
	int m_skill_flame_count = 0;           // フレームカウント用変数
	Vector2 m_sp_pos = { 0,0 };          // 描画座標
	Vector2 m_sp_count = { 0,0 };        // 計算用
	float m_now_sp = 0;                  // 今のSPポイント
	int m_sp_flame_count = 0;              // フレームカウント用変数

	int* m_attack_damage = 0; // 攻撃力
	bool m_skill_cooldown = false;  // スキル使用後のクールダウン
	bool m_SP = false;              // 必殺技のSP
	// ↑上の二つの変数の上限は各キャラのクラスで定義する
	//---------------------------------------------------------------------------
	// 攻撃時の当たり判定用変数
	//---------------------------------------------------------------------------
	Vector3 m_hit_pos_pot = { 0.0f,0.0f,0.0f };
	Vector3 m_hit_pos_under = { 0.0f,0.0f,0.0f };
};