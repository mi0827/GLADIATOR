#pragma once

/**
* @fule Animation.h
* @brief アニメーション用のクラス
*/

/**
* アニメーション用のクラス
*/
class Animation
{
public:
	// コンストラクタ
	Animation();
	// デストラクタ
	~Animation();

	
	//--------------------------------------------------
	// アニメーション用の変数の追加
	//--------------------------------------------------
	/**
	* @fn
	* 普通アニメーション変数のNew用関数
	* @param １：アニメーション最大数
	* @param ２：アニメーション用変数
	* @param ３：トータルフレーム数変数
	* @param ４：ブレンド率用変数
	* @param ５：進めるためのフレーム用変数
	* @detail アニメションに必要な変数を用意するようの関数
	*/
	void Nomal_Anim_New(int ANIM_MAX);

	/**
	* @fn
	* 攻撃アニメーション用の変数のNew用関数
	* @param １：アニメーション最大数
	* @param ２：アニメーション用変数
	* @param ３：トータルフレーム数変数
	* @param ４：ブレンド率用変数
	* @param ５：進めるためのフレーム用変数
　　* @detail アニメションに必要な変数を用意するようの関数
	*/
	void Attack_Anim_New(int ANIM_MAX);

	/*void Attack_Anim_New
	(int ANIM_MAX, int* model, int* attach, float* total, float* rate, float* frame);*/

	/**
	* @fn
	* ダメージアニメーション用の変数のNew用関数
	* @param １：アニメーション最大数
	* @param ２：アニメーション用変数
	* @param ３：トータルフレーム数変数
	* @param ４：ブレンド率用変数
	* @param ５：進めるためのフレーム用変数
	* @detail アニメションに必要な変数を用意するようの関数
	*/
	void Damage_Anim_New
	(int ANIM_MAX);
	
	/**
	* @fn
	* ガードアニメーション用の変数のNew用関数
	* @param １：アニメーション最大数
	* @param ２：アニメーション用変数
	* @param ３：トータルフレーム数変数
	* @param ４：ブレンド率用変数
	* @param ５：進めるためのフレーム用変数
	* @detail アニメションに必要な変数を用意するようの関数
	*/
	void Block_Anim_New
	(int ANIM_MAX);
	
	//--------------------------------------------------
	// アニメーションの読み込み用関数
	//--------------------------------------------------

	/**
	* @fn
	* アニメーションの初期処理
	* @param １：最初にしておきたいアニメーション番号
	* @param ２：アニメーションの最大数
	* @param ３：アタッチに必要な番号
	*/
	void Nomal_Anim_Init(int anim_idle, int ANIM_MAX, int index);

	//--------------------------------------------------
	// アタッチ用の関数
	//--------------------------------------------------
	



	// でタッチ


	// その他の関数
	/**
	* @fn
	* アニメーション変数deleteする用の関数
	* @detail 用意したアニメーションを削除するための関数
	*/
	void Anim_Delete();

public:

	//---------------------------------------------------------------------------
	// 普通アニメーション読み込み用の配列
	//---------------------------------------------------------------------------
	int*   m_anim_model = 0;    // アニメーションモデル
	int*   m_anim_attach = 0;   // モデルにアニメーションをアタッチする用の配列（アタッチ番号を取得する）
	float* m_anim_total = 0;  // アニメーションが何フレーム科を取得、それを保存する用の配列
	float* m_anim_rate = 0;	// それぞれのアニメーションのブレンド率（0.0f ~ 1.0f）
	float* m_anim_frame = 0;  // アニメーションが何フレーム進んでいるのか


	//---------------------------------------------------------------------------
	// 攻撃アニメーション用変数
	//---------------------------------------------------------------------------
	int* m_attack_anim_model = 0;    // 各攻撃アニメーションアニメーション読み込み用の配列
	int* m_attack_anim_attach = 0;   // モデルに攻撃アニメーションをアタッチする用の配列（アタッチ番号を取得する）
	float* m_attack_anim_total = 0;  // 攻撃アニメーションが何フレーム科を取得、それを保存する用の配列
	float* m_attack_anim_rate = 0;   // それぞれの攻撃アニメーションのブレンド率（0.0f ~ 1.0f）
	float* m_attack_anim_frame = 0;  // 攻撃アニメーションが何フレーム進んでいるのか


	//---------------------------------------------------------------------------
	// ガードアニメーション用変数
	//---------------------------------------------------------------------------
	int* m_block_anim_model = 0;         // アニメーションモデル
	int* m_block_anim_attach = 0;        // モデルにアニメーションをアタッチする用の配列（アタッチ番号を取得する）
	float* m_block_anim_total = 0;       // アニメーションが何フレーム科を取得、それを保存する用の配列
	float* m_block_anim_rate = 0;	       // それぞれのアニメーションのブレンド率（0.0f ~ 1.0f）
	float* m_block_anim_frame = 0;       // アニメーションが何フレーム進んでいるのか


	//---------------------------------------------------------------------------
	// ダメージ（受けた時の）アニメーション用変数
	//---------------------------------------------------------------------------
	int* m_damage_anim_model = 0;    // アニメーションモデル
	int* m_damage_anim_attach = 0;   // モデルにアニメーションをアタッチする用の配列（アタッチ番号を取得する）
	float* m_damage_anim_total = 0;  // アニメーションが何フレーム科を取得、それを保存する用の配列
	float* m_damage_anim_rate = 0;   // それぞれのアニメーションがどのくらうのわりあいになるか（0.0f ~ 1.0f）
	float* m_damage_anim_frame = 0;  // アニメーションが何フレーム進んでいるのか

};